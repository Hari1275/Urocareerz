# Task ID: 7
# Title: Mentee Content Contribution
# Status: pending
# Dependencies: 4, 5
# Priority: medium
# Description: Allow Mentees to submit their own opportunities for admin approval and start case discussion threads.
# Details:
Create a form for Mentees to submit external opportunities, which will enter the admin moderation queue. Implement a basic forum-like feature for creating and viewing case discussion threads.

# Test Strategy:
As a Mentee, submit an opportunity and verify it appears in the admin moderation queue. Create a new discussion thread and verify it is visible to other users.

# Subtasks:
## 1. Design and Set Up User Database Schema [pending]
### Dependencies: None
### Description: Create the necessary database table(s) to store user information, including credentials and profile data.
### Details:
The 'users' table should include columns for id (primary key), username (unique), email (unique), hashed_password, created_at, and updated_at. Use a migration script to create and version the schema. Ensure password storage is secure using a strong hashing algorithm like bcrypt.

## 2. Implement User Registration API Endpoint [pending]
### Dependencies: 7.1
### Description: Create a public API endpoint (e.g., POST /api/auth/register) that allows new users to sign up.
### Details:
The endpoint should accept username, email, and password. It must validate the input (e.g., password strength, valid email format), check for existing username/email, hash the password securely, and save the new user to the database. Return a success message or user object (without sensitive data) upon successful registration.

## 3. Implement User Login API Endpoint [pending]
### Dependencies: 7.1
### Description: Create an API endpoint (e.g., POST /api/auth/login) for users to authenticate and receive an access token.
### Details:
The endpoint should accept an email/username and password. It will find the user in the database and compare the provided password with the stored hash. If credentials are valid, generate a JSON Web Token (JWT) containing the user ID and an expiration date. Return the JWT to the client.

## 4. Develop Authentication Middleware for Protected Routes [pending]
### Dependencies: 7.3
### Description: Create a middleware function that can be applied to API routes that require an authenticated user.
### Details:
The middleware should extract the JWT from the request's 'Authorization' header. It must verify the token's signature and expiration. If valid, it should decode the payload, identify the user, and attach the user object to the request for downstream handlers. If invalid, it should return a 401 Unauthorized error.

## 5. Implement 'Get User Profile' Protected Endpoint [pending]
### Dependencies: 7.4
### Description: Create a protected API endpoint (e.g., GET /api/users/me) that returns the profile information of the currently authenticated user.
### Details:
This endpoint will be protected by the authentication middleware. It should use the user information attached to the request by the middleware to fetch the user's details (excluding sensitive data like the password hash) from the database and return them as a JSON object.

