// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  firstName String?
  lastName  String?
  role      Role     @default(MENTEE)
  otpSecret String?
  otpExpiry DateTime?
  termsAccepted Boolean @default(false)
  deletedAt DateTime? // Soft delete field
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Profile relationship
  profile   Profile?
  
  // Opportunities relationship (unified - both mentor and mentee created)
  opportunities Opportunity[] @relation("OpportunityCreator")
  
  // Saved opportunities relationship (for mentees)
  savedOpportunities SavedOpportunity[]
  
  // Applications relationship (for mentees)
  applications Application[]
  
  // Discussion threads (created by user)
  discussionThreads DiscussionThread[]
  
  // Discussion comments (created by user)
  discussionComments DiscussionComment[]
  
  // Audit logs (actions performed by user)
  auditLogs AuditLog[]
}

model Profile {
  id                    String   @id @default(auto()) @map("_id") @db.ObjectId
  userId                String   @unique @db.ObjectId
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Common profile fields
  bio                   String?
  location              String?
  avatar                String? // S3 key for avatar file
  avatarFileName        String? // Original filename for avatar
  resume                String? // S3 key for resume file
  resumeFileName        String? // Original filename
  
  // Mentee-specific fields
  education             String?
  interests             String[]
  purposeOfRegistration String?
  
  // Mentor-specific fields
  specialty             String?
  subSpecialty          String?
  workplace             String?
  availabilityStatus    String   @default("Available")
  yearsOfExperience     Int?
  
  // Timestamps
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

enum Role {
  MENTEE
  MENTOR
  ADMIN
}

model Opportunity {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  title             String
  description       String
  location          String?
  experienceLevel   String?
  opportunityTypeId String   @db.ObjectId
  opportunityType   OpportunityType @relation(fields: [opportunityTypeId], references: [id])
  status            OpportunityStatus @default(PENDING)
  
  // Unified creator field - can be either mentor or mentee
  creatorId         String   @db.ObjectId
  creator           User     @relation("OpportunityCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  creatorRole       Role     // MENTOR or MENTEE to distinguish the creator type
  
  // Source attribution for external opportunities
  sourceUrl         String?  // URL where the opportunity was found
  sourceName        String?  // Name of the source (e.g., "LinkedIn", "Indeed")
  
  // Opportunity details
  requirements      String?
  benefits          String?
  duration          String?
  compensation      String?
  applicationDeadline DateTime?
  
  // Admin management fields
  adminFeedback     String?  // Admin feedback on the opportunity
  adminNotes        String?  // Internal admin notes
  
  // Timestamps
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  deletedAt         DateTime? // Soft delete field
  
  // Relationships
  applications      Application[]
  savedOpportunities SavedOpportunity[]
}

enum OpportunityStatus {
  PENDING
  APPROVED
  REJECTED
  EXPIRED
}

model OpportunityType {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  description String?
  color       String   @default("#3B82F6") // Default blue color
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relationships
  opportunities Opportunity[]
}

model Application {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  menteeId      String   @db.ObjectId
  opportunityId String   @db.ObjectId
  status        ApplicationStatus @default(PENDING)
  coverLetter   String?
  resumeUrl     String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relationships
  mentee        User     @relation(fields: [menteeId], references: [id], onDelete: Cascade)
  opportunity   Opportunity @relation(fields: [opportunityId], references: [id], onDelete: Cascade)
  
  @@unique([menteeId, opportunityId])
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
  WITHDRAWN
}

model SavedOpportunity {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  userId        String   @db.ObjectId
  opportunityId String   @db.ObjectId
  createdAt     DateTime @default(now())
  
  // Relationships
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  opportunity   Opportunity @relation(fields: [opportunityId], references: [id], onDelete: Cascade)
  
  @@unique([userId, opportunityId])
}

model DiscussionThread {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  content     String
  category    DiscussionCategory
  tags        String[]
  status      DiscussionStatus @default(ACTIVE)
  isPinned    Boolean  @default(false)
  viewCount   Int      @default(0)
  authorId    String   @db.ObjectId
  deletedAt   DateTime? // Soft delete field
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relationships
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments    DiscussionComment[]
}

enum DiscussionCategory {

  GENERAL
  CASE_DISCUSSION
  CAREER_ADVICE
  TECHNICAL
  NETWORKING
  RESOURCES

}

enum DiscussionStatus {
  ACTIVE
  CLOSED
  ARCHIVED
}

model DiscussionComment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  authorId  String   @db.ObjectId
  threadId  String   @db.ObjectId
  parentId  String?  @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relationships
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  thread    DiscussionThread @relation(fields: [threadId], references: [id], onDelete: Cascade)
  parent    DiscussionComment? @relation("CommentReplies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   DiscussionComment[] @relation("CommentReplies")
}

model AuditLog {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  action     String
  entityType String
  entityId   String
  userId     String   @db.ObjectId
  metadata   Json?    // Additional data about the action
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())
  
  // Relationships
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([action])
  @@index([entityType])
  @@index([userId])
  @@index([createdAt])
}
