// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  firstName String?
  lastName  String?
  role      Role     @default(MENTEE)
  otpSecret String?
  otpExpiry DateTime?
  termsAccepted Boolean @default(false)
  deletedAt DateTime? // Soft delete field
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Profile relationship
  profile   Profile?
  
  // Opportunities relationship (for mentors)
  opportunities Opportunity[]
  
  // Saved opportunities relationship (for mentees)
  savedOpportunities SavedOpportunity[]
  
  // Applications relationship (for mentees)
  applications Application[]
  
  // Mentee opportunity submissions
  menteeOpportunities MenteeOpportunity[]
  
  // Discussion threads (created by user)
  discussionThreads DiscussionThread[]
  
  // Discussion comments (created by user)
  discussionComments DiscussionComment[]
}

model Profile {
  id                    String   @id @default(auto()) @map("_id") @db.ObjectId
  userId                String   @unique @db.ObjectId
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Common profile fields
  bio                   String?
  location              String?
  avatar                String? // S3 key for avatar file
  avatarFileName        String? // Original filename for avatar
  resume                String? // S3 key for resume file
  resumeFileName        String? // Original filename
  
  // Mentee-specific fields
  education             String?
  interests             String[]
  purposeOfRegistration String?
  
  // Mentor-specific fields
  specialty             String?
  subSpecialty          String?
  workplace             String?
  availabilityStatus    String   @default("Available")
  yearsOfExperience     Int?
  
  // Timestamps
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

enum Role {
  MENTEE
  MENTOR
  ADMIN
}

model Opportunity {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  title             String
  description       String
  location          String?
  experienceLevel   String?
  opportunityTypeId String   @db.ObjectId
  opportunityType   OpportunityType @relation(fields: [opportunityTypeId], references: [id])
  status            OpportunityStatus @default(PENDING)
  mentorId          String   @db.ObjectId
  mentor            User     @relation(fields: [mentorId], references: [id], onDelete: Cascade)
  
  // Additional fields
  requirements      String?
  benefits          String?
  duration          String?
  compensation      String?
  applicationDeadline DateTime?
  
  // Soft delete field
  deletedAt         DateTime?
  
  // Relationships
  savedOpportunities SavedOpportunity[]
  applications        Application[]
  
  // Timestamps
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

// New model for mentee opportunity submissions
model MenteeOpportunity {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  title             String
  description       String
  location          String?
  experienceLevel   String?
  opportunityTypeId String   @db.ObjectId
  opportunityType   OpportunityType @relation(fields: [opportunityTypeId], references: [id])
  status            MenteeOpportunityStatus @default(PENDING)
  menteeId          String   @db.ObjectId
  mentee            User     @relation(fields: [menteeId], references: [id], onDelete: Cascade)
  
  // Additional fields
  requirements      String?
  benefits          String?
  duration          String?
  compensation      String?
  applicationDeadline DateTime?
  sourceUrl         String?  // URL to the original opportunity
  sourceName        String?  // Name of the source (e.g., "LinkedIn", "Company Website")
  
  // Admin feedback
  adminFeedback     String?
  adminNotes        String?
  
  // Soft delete field
  deletedAt         DateTime?
  
  // Timestamps
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

// New model for discussion threads
model DiscussionThread {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  content     String
  category    DiscussionCategory @default(GENERAL)
  status      DiscussionStatus @default(ACTIVE)
  authorId    String   @db.ObjectId
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  // Thread metadata
  tags        String[]
  isPinned    Boolean  @default(false)
  viewCount   Int      @default(0)
  
  // Soft delete field
  deletedAt   DateTime?
  
  // Relationships
  comments    DiscussionComment[]
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// New model for discussion comments
model DiscussionComment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  authorId  String   @db.ObjectId
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  threadId  String   @db.ObjectId
  thread    DiscussionThread @relation(fields: [threadId], references: [id], onDelete: Cascade)
  
  // Comment metadata
  isEdited  Boolean  @default(false)
  editedAt  DateTime?
  
  // Soft delete field
  deletedAt DateTime?
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OpportunityType {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  description String?
  color       String?  // For UI styling (e.g., "blue", "green", "purple")
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  opportunities Opportunity[]
  menteeOpportunities MenteeOpportunity[]

  @@map("opportunityTypes")
}

enum OpportunityStatus {
  PENDING
  APPROVED
  REJECTED
  CLOSED
}

enum MenteeOpportunityStatus {
  PENDING
  APPROVED
  REJECTED
  CONVERTED  // Converted to a regular opportunity
}

enum DiscussionCategory {
  GENERAL
  CASE_DISCUSSION
  CAREER_ADVICE
  TECHNICAL
  NETWORKING
  RESOURCES
}

enum DiscussionStatus {
  ACTIVE
  CLOSED
  ARCHIVED
}

model SavedOpportunity {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  userId        String      @db.ObjectId
  opportunityId String      @db.ObjectId
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  opportunity   Opportunity @relation(fields: [opportunityId], references: [id], onDelete: Cascade)
  createdAt     DateTime    @default(now())
  
  @@unique([userId, opportunityId])
}

model Application {
  id            String           @id @default(auto()) @map("_id") @db.ObjectId
  menteeId      String           @db.ObjectId
  opportunityId String           @db.ObjectId
  status        ApplicationStatus @default(PENDING)
  cvFile        String?          // S3 key for CV file
  cvFileName    String?          // Original filename for CV
  coverLetter   String?
  mentee        User             @relation(fields: [menteeId], references: [id], onDelete: Cascade)
  opportunity   Opportunity      @relation(fields: [opportunityId], references: [id], onDelete: Cascade)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  
  @@unique([menteeId, opportunityId])
}

enum ApplicationStatus {
  PENDING
  UNDER_REVIEW
  ACCEPTED
  REJECTED
  WITHDRAWN
}
